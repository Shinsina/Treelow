[{"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\index.js":"1","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\App.js":"2","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\reportWebVitals.js":"3","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\firebase.js":"4","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\AuthContext.js":"5","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Board.js":"6","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\PageNotFound.js":"7","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\UserForm.js":"8","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Header.js":"9","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\Home.js":"10","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\CreateBoardForm.js":"11","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\List.js":"12","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\BoardPreview.js":"13","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Card.js":"14","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\EditCardModal.js":"15"},{"size":478,"mtime":1611530642526,"results":"16","hashOfConfig":"17"},{"size":3359,"mtime":1611532237022,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":697,"mtime":1611507538129,"results":"20","hashOfConfig":"17"},{"size":2353,"mtime":1611530642515,"results":"21","hashOfConfig":"17"},{"size":4776,"mtime":1611530642516,"results":"22","hashOfConfig":"17"},{"size":139,"mtime":1611530642524,"results":"23","hashOfConfig":"17"},{"size":2582,"mtime":1611531113684,"results":"24","hashOfConfig":"17"},{"size":912,"mtime":1611531106035,"results":"25","hashOfConfig":"17"},{"size":899,"mtime":1611530642523,"results":"26","hashOfConfig":"17"},{"size":1970,"mtime":1611530642518,"results":"27","hashOfConfig":"17"},{"size":4186,"mtime":1611530642520,"results":"28","hashOfConfig":"17"},{"size":719,"mtime":1611531088771,"results":"29","hashOfConfig":"17"},{"size":1719,"mtime":1611530642517,"results":"30","hashOfConfig":"17"},{"size":3777,"mtime":1611530642519,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"vlfyjo",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\index.js",[],["66","67"],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\App.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\reportWebVitals.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\firebase.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\AuthContext.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Board.js",["68"],"import React from 'react'\nimport List from './List'\nimport { boardsRef, listsRef } from '../firebase'\nimport PropTypes from 'prop-types'\nimport {AuthConsumer} from './AuthContext'\n\nclass Board extends React.Component {\n    state = {\n        currentBoard: {},\n        currentLists: [],\n        message: ''\n    }\n    componentDidMount() {\n        this.getBoard(this.props.match.params.boardId)\n        this.getLists(this.props.match.params.boardId)\n    }\n    getLists = async boardId => {\n        try {\n            const lists = await listsRef\n            .where('list.board', '==', boardId)\n            .orderBy('list.createdAt')\n            .onSnapshot(snapshot => {\n                snapshot.docChanges()\n                .forEach(change => {\n                    if(change.type === 'added'){\n                        const doc = change.doc\n                        const list = {\n                            id: doc.id,\n                            title: doc.data().list.title\n                        }\n                        this.setState({currentLists: [...this.state.currentLists, list]})\n                    }\n                    if(change.type ==='removed') {\n                        this.setState ({\n                            currentLists: [...this.state.currentLists.filter(list => {\n                                return list.id !== change.doc.id\n                            })]\n                        })\n                    }\n                })\n            })\n        } catch(error) {\n            console.log(\"Error fetching lists \", error)\n        }\n    }\n    getBoard = async boardId => {\n        try {\n            const board = await boardsRef.doc(boardId).get()\n            this.setState({ currentBoard: board.data().board})\n        } catch(error) {\n            this.setState({\n                message: 'Board not found...'\n            })\n        }\n    }\n    addBoardInput = React.createRef()\n    createNewList = async (e, userId) => {\n        try {\n        e.preventDefault()\n        console.log(this.addBoardInput)\n        const list = {\n            title: this.addBoardInput.current.value,\n            board: this.props.match.params.boardId,\n            createdAt: new Date(),\n            user: userId\n        }\n        if(list.title && list.board){\n        await listsRef.add({ list })\n        }\n        this.addBoardInput.current.value = ''\n    } catch (error) {\n        console.error('Error creating a new list: ', error);\n    }\n}\n\ndeleteBoard = async () => {\n    const boardId = this.props.match.params.boardId\n    this.props.deleteBoard(boardId)\n    this.setState({\n        message: 'Board not found...'\n    })\n}\nupdateBoard = e => {\n    const boardId = this.props.match.params.boardId\n    const newTitle = e.currentTarget.value\n    if(boardId && newTitle) {\n        this.props.updateBoard(boardId, newTitle)\n    }\n}\n    render() {\n        return (\n            <AuthConsumer>\n            {({user}) =>(\n                <React.Fragment>\n                {user.id === this.state.currentBoard.user ? (\n                <div className=\"board-wrapper\"\n                style={{backgroundColor: this.state.currentBoard.background}}>\n                {this.state.message === '' ? (\n                <div className=\"board-header\">{/*<h3>{this.state.currentBoard.title}</h3>*/}\n                <input \n                    type=\"text\"\n                    name=\"boardTitle\"\n                    onChange={this.updateBoard}\n                    defaultValue={this.state.currentBoard.title}\n                />\n                <button onClick={this.deleteBoard}>Delete Board</button>\n                </div>\n                ) : (\n                    <hx>{this.state.message}</hx>\n                )}\n                <div className=\"lists-wrapper\">\n                    {Object.keys(this.state.currentLists).map(key => (\n                        <List \n                        key={this.state.currentLists[key].id}\n                        list={this.state.currentLists[key]}\n                        deleteList={this.props.deleteList}/>\n                    ))}\n                </div>\n                <form onSubmit={(e) => this.createNewList(e,user.id)} className=\"new-list-wrapper\">\n                    <input\n                    type={this.state.message === '' ? 'text': 'hidden'}\n                    ref={this.addBoardInput}\n                    name=\"name\"\n                    placeholder=\" + New List\" />\n                    </form>\n                    </div>\n                    ): (<span></span>)}\n                    </React.Fragment>\n            )}\n                </AuthConsumer>\n        )\n    }\n}\n\nBoard.propTypes = {\n    deleteBoard: PropTypes.func.isRequired,\n    deleteList: PropTypes.func.isRequired,\n    updateBoard: PropTypes.func.isRequired\n}\n\nexport default Board","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\PageNotFound.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\UserForm.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Header.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\Home.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\CreateBoardForm.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\List.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\BoardPreview.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Card.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\EditCardModal.js",["69"],"import { element } from 'prop-types'\nimport React from 'react'\nimport { cardsRef } from '../firebase'\nimport PropTypes from 'prop-types'\nimport TextareaAutosize from 'react-autosize-textarea'\n\nclass EditCardModal extends React.Component {\n    state = {\n        availableLabels: [\n            \"#80ccff\",\n            \"#80ffaa\",\n            \"#f94a1e\",\n            \"#ffb3ff\",\n            \"#bf00ff\",\n            \"#ffad33\"\n        ],\n        selectedLabels: []\n    }\n    componentDidMount() {\n        this.setState({\n            selectedLabels: this.props.cardData.labels\n        })\n    }\n    textInput = React.createRef()\n    updateCard = async e  => {\n        try {\n            e.preventDefault()\n            const cardId = this.props.cardData.id\n            const newText = this.textInput.current.value\n            const labels = this.state.selectedLabels\n            const card = await cardsRef.doc(cardId)\n            card.update({\n                'card.text': newText,\n                'card.labels': labels\n            })\n            this.props.toggleModal()\n        } catch(error) {\n            console.error(\"Error updating card: \", error)\n        }\n    }\n    setLabel = label => {\n        const labels = [...this.state.selectedLabels]\n        if (labels.includes(label)){\n            const newLabels = labels.filter((element) => {\n                return element !== label\n            })\n            this.setState({selectedLabels: newLabels})\n        }\n        else {\n            labels.push(label)\n            this.setState({selectedLabels: labels})\n        }\n    }\n    render () {\n        return (\n            <div className=\"modal-wrapper\"\n            style={{display: this.props.modalOpen ? 'block': 'none'}}>\n                <div className=\"modal-body\">\n                    <form onSubmit={this.updateCard}>\n                        <div>\n                            <span className=\"modal-close\" onClick={this.props.toggleModal}>&times;</span>\n                            <p className=\"label-title\">Add/Remove Labels</p>\n                            {this.state.availableLabels.map(label => {\n                                return <span \n                                key = {label}\n                                onClick = {() => this.setLabel(label)}\n                                className=\"label\" \n                                style={{background: label}}></span>\n                            })}\n                            <hr />\n                        </div>\n                        <div className=\"edit-area\">\n                            <span className=\"edit-icon\">&#x270E;</span>\n                            {/*<input \n                            className=\"textbox-edit\"\n                            defaultValue={this.props.cardData.text}\n                            ref={this.textInput}></input>*/}\n                            <TextareaAutosize\n                            className=\"textbox-edit\"\n                            defaultValue={this.props.cardData.text}\n                            ref={this.textInput}></TextareaAutosize>\n                        </div>\n                        <div>\n                            <p className=\"label-title\">Labels:</p>\n                            {this.state.selectedLabels.map((label) =>{\n                                return <span className=\"label\" style={{background: label}} key={label}></span>\n                            })}\n                        </div>\n                        <button type=\"submit\">Save Changes</button>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nEditCardModal.propTypes = {\n    modalOpen: PropTypes.bool.isRequired,\n    toggleModal: PropTypes.func.isRequired,\n    cardData: PropTypes.object.isRequired\n}\n\nexport default EditCardModal",["70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":19,"column":19,"nodeType":"78","messageId":"79","endLine":19,"endColumn":24},{"ruleId":"76","severity":1,"message":"80","line":1,"column":10,"nodeType":"78","messageId":"79","endLine":1,"endColumn":17},{"ruleId":"72","replacedBy":"81"},{"ruleId":"74","replacedBy":"82"},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"no-unused-vars","'lists' is assigned a value but never used.","Identifier","unusedVar","'element' is defined but never used.",["83"],["84"],"no-global-assign","no-unsafe-negation"]