[{"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\index.js":"1","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\App.js":"2","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\reportWebVitals.js":"3","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Board.js":"4","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\List.js":"5","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Card.js":"6","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\sampleData.js":"7","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\Home.js":"8","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\BoardPreview.js":"9","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\CreateBoardForm.js":"10","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\PageNotFound.js":"11","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\firebase.js":"12","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\EditCardModal.js":"13","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\AuthContext.js":"14","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\UserForm.js":"15","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Header.js":"16"},{"size":478,"mtime":1611434343918,"results":"17","hashOfConfig":"18"},{"size":3359,"mtime":1611511362617,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":4916,"mtime":1611512188524,"results":"21","hashOfConfig":"18"},{"size":4313,"mtime":1611512325350,"results":"22","hashOfConfig":"18"},{"size":1772,"mtime":1611462563861,"results":"23","hashOfConfig":"18"},{"size":1587,"mtime":1611435951047,"results":"24","hashOfConfig":"18"},{"size":932,"mtime":1611511739973,"results":"25","hashOfConfig":"18"},{"size":719,"mtime":1611462989075,"results":"26","hashOfConfig":"18"},{"size":2027,"mtime":1611511129013,"results":"27","hashOfConfig":"18"},{"size":147,"mtime":1611445574483,"results":"28","hashOfConfig":"18"},{"size":697,"mtime":1611507538129,"results":"29","hashOfConfig":"18"},{"size":3879,"mtime":1611463421427,"results":"30","hashOfConfig":"18"},{"size":2441,"mtime":1611511596566,"results":"31","hashOfConfig":"18"},{"size":2646,"mtime":1611511920776,"results":"32","hashOfConfig":"18"},{"size":912,"mtime":1611512027729,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"vlfyjo",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\index.js",[],["71","72"],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\App.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\reportWebVitals.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Board.js",["73"],"import React from 'react'\r\nimport List from './List'\r\nimport { boardsRef, listsRef } from '../firebase'\r\nimport PropTypes from 'prop-types'\r\nimport {AuthConsumer} from './AuthContext'\r\n\r\nclass Board extends React.Component {\r\n    state = {\r\n        currentBoard: {},\r\n        currentLists: [],\r\n        message: ''\r\n    }\r\n    componentDidMount() {\r\n        this.getBoard(this.props.match.params.boardId)\r\n        this.getLists(this.props.match.params.boardId)\r\n    }\r\n    getLists = async boardId => {\r\n        try {\r\n            const lists = await listsRef\r\n            .where('list.board', '==', boardId)\r\n            .orderBy('list.createdAt')\r\n            .onSnapshot(snapshot => {\r\n                snapshot.docChanges()\r\n                .forEach(change => {\r\n                    if(change.type === 'added'){\r\n                        const doc = change.doc\r\n                        const list = {\r\n                            id: doc.id,\r\n                            title: doc.data().list.title\r\n                        }\r\n                        this.setState({currentLists: [...this.state.currentLists, list]})\r\n                    }\r\n                    if(change.type ==='removed') {\r\n                        this.setState ({\r\n                            currentLists: [...this.state.currentLists.filter(list => {\r\n                                return list.id !== change.doc.id\r\n                            })]\r\n                        })\r\n                    }\r\n                })\r\n            })\r\n        } catch(error) {\r\n            console.log(\"Error fetching lists \", error)\r\n        }\r\n    }\r\n    getBoard = async boardId => {\r\n        try {\r\n            const board = await boardsRef.doc(boardId).get()\r\n            this.setState({ currentBoard: board.data().board})\r\n        } catch(error) {\r\n            this.setState({\r\n                message: 'Board not found...'\r\n            })\r\n        }\r\n    }\r\n    addBoardInput = React.createRef()\r\n    createNewList = async (e, userId) => {\r\n        try {\r\n        e.preventDefault()\r\n        console.log(this.addBoardInput)\r\n        const list = {\r\n            title: this.addBoardInput.current.value,\r\n            board: this.props.match.params.boardId,\r\n            createdAt: new Date(),\r\n            user: userId\r\n        }\r\n        if(list.title && list.board){\r\n        await listsRef.add({ list })\r\n        }\r\n        this.addBoardInput.current.value = ''\r\n    } catch (error) {\r\n        console.error('Error creating a new list: ', error);\r\n    }\r\n}\r\n\r\ndeleteBoard = async () => {\r\n    const boardId = this.props.match.params.boardId\r\n    this.props.deleteBoard(boardId)\r\n    this.setState({\r\n        message: 'Board not found...'\r\n    })\r\n}\r\nupdateBoard = e => {\r\n    const boardId = this.props.match.params.boardId\r\n    const newTitle = e.currentTarget.value\r\n    if(boardId && newTitle) {\r\n        this.props.updateBoard(boardId, newTitle)\r\n    }\r\n}\r\n    render() {\r\n        return (\r\n            <AuthConsumer>\r\n            {({user}) =>(\r\n                <React.Fragment>\r\n                {user.id === this.state.currentBoard.user ? (\r\n                <div className=\"board-wrapper\"\r\n                style={{backgroundColor: this.state.currentBoard.background}}>\r\n                {this.state.message === '' ? (\r\n                <div className=\"board-header\">{/*<h3>{this.state.currentBoard.title}</h3>*/}\r\n                <input \r\n                    type=\"text\"\r\n                    name=\"boardTitle\"\r\n                    onChange={this.updateBoard}\r\n                    defaultValue={this.state.currentBoard.title}\r\n                />\r\n                <button onClick={this.deleteBoard}>Delete Board</button>\r\n                </div>\r\n                ) : (\r\n                    <hx>{this.state.message}</hx>\r\n                )}\r\n                <div className=\"lists-wrapper\">\r\n                    {Object.keys(this.state.currentLists).map(key => (\r\n                        <List \r\n                        key={this.state.currentLists[key].id}\r\n                        list={this.state.currentLists[key]}\r\n                        deleteList={this.props.deleteList}/>\r\n                    ))}\r\n                </div>\r\n                <form onSubmit={(e) => this.createNewList(e,user.id)} className=\"new-list-wrapper\">\r\n                    <input\r\n                    type={this.state.message === '' ? 'text': 'hidden'}\r\n                    ref={this.addBoardInput}\r\n                    name=\"name\"\r\n                    placeholder=\" + New List\" />\r\n                    </form>\r\n                    </div>\r\n                    ): (<span></span>)}\r\n                    </React.Fragment>\r\n            )}\r\n                </AuthConsumer>\r\n        )\r\n    }\r\n}\r\n\r\nBoard.propTypes = {\r\n    deleteBoard: PropTypes.func.isRequired,\r\n    deleteList: PropTypes.func.isRequired,\r\n    updateBoard: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Board","C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\List.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Card.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\sampleData.js",[],["74","75"],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\Home.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\BoardPreview.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\CreateBoardForm.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\pages\\PageNotFound.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\firebase.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\EditCardModal.js",["76"],"import { element } from 'prop-types'\r\nimport React from 'react'\r\nimport { cardsRef } from '../firebase'\r\nimport PropTypes from 'prop-types'\r\nimport TextareaAutosize from 'react-autosize-textarea'\r\n\r\nclass EditCardModal extends React.Component {\r\n    state = {\r\n        availableLabels: [\r\n            \"#80ccff\",\r\n            \"#80ffaa\",\r\n            \"#f94a1e\",\r\n            \"#ffb3ff\",\r\n            \"#bf00ff\",\r\n            \"#ffad33\"\r\n        ],\r\n        selectedLabels: []\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            selectedLabels: this.props.cardData.labels\r\n        })\r\n    }\r\n    textInput = React.createRef()\r\n    updateCard = async e  => {\r\n        try {\r\n            e.preventDefault()\r\n            const cardId = this.props.cardData.id\r\n            const newText = this.textInput.current.value\r\n            const labels = this.state.selectedLabels\r\n            const card = await cardsRef.doc(cardId)\r\n            card.update({\r\n                'card.text': newText,\r\n                'card.labels': labels\r\n            })\r\n            this.props.toggleModal()\r\n        } catch(error) {\r\n            console.error(\"Error updating card: \", error)\r\n        }\r\n    }\r\n    setLabel = label => {\r\n        const labels = [...this.state.selectedLabels]\r\n        if (labels.includes(label)){\r\n            const newLabels = labels.filter((element) => {\r\n                return element !== label\r\n            })\r\n            this.setState({selectedLabels: newLabels})\r\n        }\r\n        else {\r\n            labels.push(label)\r\n            this.setState({selectedLabels: labels})\r\n        }\r\n    }\r\n    render () {\r\n        return (\r\n            <div className=\"modal-wrapper\"\r\n            style={{display: this.props.modalOpen ? 'block': 'none'}}>\r\n                <div className=\"modal-body\">\r\n                    <form onSubmit={this.updateCard}>\r\n                        <div>\r\n                            <span className=\"modal-close\" onClick={this.props.toggleModal}>&times;</span>\r\n                            <p className=\"label-title\">Add/Remove Labels</p>\r\n                            {this.state.availableLabels.map(label => {\r\n                                return <span \r\n                                key = {label}\r\n                                onClick = {() => this.setLabel(label)}\r\n                                className=\"label\" \r\n                                style={{background: label}}></span>\r\n                            })}\r\n                            <hr />\r\n                        </div>\r\n                        <div className=\"edit-area\">\r\n                            <span className=\"edit-icon\">&#x270E;</span>\r\n                            {/*<input \r\n                            className=\"textbox-edit\"\r\n                            defaultValue={this.props.cardData.text}\r\n                            ref={this.textInput}></input>*/}\r\n                            <TextareaAutosize\r\n                            className=\"textbox-edit\"\r\n                            defaultValue={this.props.cardData.text}\r\n                            ref={this.textInput}></TextareaAutosize>\r\n                        </div>\r\n                        <div>\r\n                            <p className=\"label-title\">Labels:</p>\r\n                            {this.state.selectedLabels.map((label) =>{\r\n                                return <span className=\"label\" style={{background: label}} key={label}></span>\r\n                            })}\r\n                        </div>\r\n                        <button type=\"submit\">Save Changes</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nEditCardModal.propTypes = {\r\n    modalOpen: PropTypes.bool.isRequired,\r\n    toggleModal: PropTypes.func.isRequired,\r\n    cardData: PropTypes.object.isRequired\r\n}\r\n\r\nexport default EditCardModal",["77","78"],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\AuthContext.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\UserForm.js",[],"C:\\Users\\CollinsJacob\\Web-Development\\React.js Academy for Beginners\\react-trello\\src\\components\\Header.js",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":19,"column":19,"nodeType":"85","messageId":"86","endLine":19,"endColumn":24},{"ruleId":"79","replacedBy":"87"},{"ruleId":"81","replacedBy":"88"},{"ruleId":"83","severity":1,"message":"89","line":1,"column":10,"nodeType":"85","messageId":"86","endLine":1,"endColumn":17},{"ruleId":"79","replacedBy":"90"},{"ruleId":"81","replacedBy":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'lists' is assigned a value but never used.","Identifier","unusedVar",["92"],["93"],"'element' is defined but never used.",["92"],["93"],"no-global-assign","no-unsafe-negation"]